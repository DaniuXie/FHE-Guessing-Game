# 🎯 Sepolia + fhEVM Coprocessor 解决方案

## ✅ 完美的解决方案（来自 Zama Protocol GPT）

### 🔑 核心思路

**问题**：
- `TFHE.asEuint32(0)` 在标准 Sepolia 上会 revert
- 因为需要 fhEVM precompiled contracts

**解决方案**：
- **不在合约中直接生成加密常量**
- **前端生成加密的 0，通过 `FHE.fromExternal` 导入**
- **使用 Gateway + Coprocessor 模式处理 FHE 操作**

---

## 🏗️ 架构对比

### ❌ 旧方法（会失败）
```solidity
function createPoll(...) {
    for (uint256 i = 0; i < options.length; i++) {
        euint32 initialCount = TFHE.asEuint32(0);  // ❌ revert!
        newPoll.encryptedVotes.push(initialCount);
    }
}
```

### ✅ 新方法（Coprocessor 模式）
```solidity
function createPoll(
    ...,
    einput[] calldata _encryptedZeros,  // ← 前端传入
    bytes[] calldata _inputProofs       // ← 证明
) {
    for (uint256 i = 0; i < options.length; i++) {
        // ✅ 从外部导入
        euint32 zero = FHE.asEuint32(_encryptedZeros[i], _inputProofs[i]);
        FHE.allow(zero, address(this));
        newPoll.encryptedVotes.push(zero);
    }
}
```

---

## 🎨 前端流程

### 创建投票时：
```javascript
// 1. 初始化 SDK
const sdk = await createInstance({...})

// 2. 为每个选项生成加密的 0
const encryptedInputs = []
const inputProofs = []

for (let i = 0; i < options.length; i++) {
    const encInput = await sdk.createEncryptedInput(userAddress, contractAddress)
    const encrypted = await encInput.add32(0)  // ← 加密 0
    const proof = await encInput.encrypt()
    
    encryptedInputs.push(encrypted)
    inputProofs.push(proof)
}

// 3. 调用合约
await contract.createPoll(
    title, 
    options, 
    duration, 
    encryptedInputs,  // ← 加密的初始值
    inputProofs       // ← 证明
)
```

### 投票时：
```javascript
// 1. 加密选项索引
const encInput = await sdk.createEncryptedInput(userAddress, contractAddress)
const encrypted = await encInput.add32(optionIndex)  // 例如：1
const proof = await encInput.encrypt()

// 2. 提交投票
await contract.vote(pollId, encrypted, proof)
```

---

## 📊 对比表

| 特性 | 旧版本（SecretVoting.sol） | 新版本（PollFactorySepolia.sol） |
|------|--------------------------|-------------------------------|
| 部署网络 | ❌ Sepolia (revert) | ✅ Sepolia (Coprocessor) |
| 初始化加密值 | ❌ 合约内 `FHE.asEuint32(0)` | ✅ 前端生成并传入 |
| 继承 | GatewayCaller | GatewayCaller |
| 投票加密 | ✅ 支持 | ✅ 支持 |
| 解密结果 | ✅ 支持 | ✅ 支持（Gateway 回调） |
| precompiles 需求 | ❌ 需要（Sepolia 没有） | ✅ 通过 Coprocessor |

---

## 🚀 部署流程

### 1. 编译新合约
```bash
npx hardhat compile
```

### 2. 部署到 Sepolia
```bash
npx hardhat run scripts/deploy_sepolia_coprocessor.js --network sepolia
```

### 3. 更新前端
- 修改 `useContract.js` 的 `createPoll` 函数
- 添加生成加密 0 的逻辑
- 更新合约地址

### 4. 测试完整流程
```bash
# 部署 + 创建投票 + 投票
npx hardhat run scripts/test_full_flow.js --network sepolia
```

---

## 📝 关键改变

### 合约层面：
1. ✅ `createPoll` 接受 `einput[]` 和 `bytes[]` 参数
2. ✅ 使用 `FHE.asEuint32(einput, bytes)` 而不是 `FHE.asEuint32(uint32)`
3. ✅ 解密使用 Gateway 回调机制

### 前端层面：
1. ✅ 创建投票前生成加密的初始值数组
2. ✅ 每次操作都使用 `createEncryptedInput()` 生成证明
3. ✅ 调用合约时传递加密数据和证明

---

## 🎯 优势

### ✅ 兼容性
- 可以在标准 Sepolia 上运行
- 不需要 fhEVM precompiles
- 使用 Gateway + Coprocessor 架构

### ✅ 安全性
- 保持完整的 FHE 加密
- 所有投票数据加密存储
- 只有授权方可解密

### ✅ 可用性
- 立即可部署
- 无需等待 Zama Devnet 访问
- 与现有工具链兼容

---

## 📋 待办事项

- [ ] 1. 从 GPT 获取完整的部署脚本
- [ ] 2. 创建所有脚本文件
- [ ] 3. 测试编译
- [ ] 4. 部署到 Sepolia
- [ ] 5. 测试创建投票
- [ ] 6. 测试投票功能
- [ ] 7. 测试解密结果
- [ ] 8. 更新前端代码
- [ ] 9. 完整端到端测试
- [ ] 10. 更新文档

---

## 💡 理解要点

### Coprocessor 模式 vs Precompiles 模式

**Precompiles 模式**（Zama Devnet）：
```
合约 → FHE.asEuint32(0) → Precompile 合约 → 加密值
```

**Coprocessor 模式**（Sepolia）：
```
前端 SDK → 生成加密值 + 证明 → 合约 → Gateway → Coprocessor → 验证
```

### 为什么这样可以工作？

1. **离链加密**：加密操作在用户端完成
2. **链上验证**：合约只验证证明（attestation）
3. **Gateway 协调**：Gateway 负责与 Coprocessor 通信
4. **标准 EVM**：不需要特殊的 precompiles

---

**这是目前在 Sepolia 上运行 FHEVM 的标准方法！** ✅

等待 GPT 提供部署脚本，然后我们就可以立即部署和测试了！🚀

Absolutely ✅ — here’s a **complete, ready-to-run fhEVM + Relayer SDK Hardhat workflow** for Sepolia Coprocessor mode.
You’ll get:

```
scripts/
 ├─ deploy_sepolia_coprocessor.js
 ├─ create_poll_with_fhe.js
 ├─ vote_encrypted.js
 └─ full_test_flow.js
```

Each file is self-contained and uses your existing Sepolia setup (Alchemy RPC, mnemonic, and SDK addresses).
Everything uses **async/await + full error handling** and logs human-readable confirmations.

---

## 🧱 Hardhat config (base)

> `hardhat.config.js`

```js
require("@nomiclabs/hardhat-ethers");
require("dotenv").config();

const { MNEMONIC, ALCHEMY_KEY } = process.env;

module.exports = {
  solidity: "0.8.19",
  networks: {
    sepolia: {
      url: `https://eth-sepolia.g.alchemy.com/v2/${ALCHEMY_KEY}`,
      chainId: 11155111,
      accounts: {
        mnemonic: MNEMONIC,
      },
    },
  },
};
```

---

## 1️⃣ **Deploy Script**

> `scripts/deploy_sepolia_coprocessor.js`

```js
const hre = require("hardhat");
const fs = require("fs");

async function main() {
  console.log("🚀 Deploying PollFactorySepolia to Sepolia Coprocessor network...");

  const [deployer] = await hre.ethers.getSigners();
  console.log("👤 Deployer:", deployer.address);

  const Factory = await hre.ethers.getContractFactory("PollFactorySepolia");
  const contract = await Factory.deploy();

  console.log("⏳ Waiting for deployment confirmation...");
  await contract.deployed();

  console.log("✅ Deployed PollFactorySepolia at:", contract.address);

  // Save deployment info
  const output = {
    network: "sepolia",
    address: contract.address,
    deployer: deployer.address,
    timestamp: new Date().toISOString(),
  };
  fs.writeFileSync("deployment.json", JSON.stringify(output, null, 2));
  console.log("💾 Saved deployment.json");

  // Verify
  const code = await hre.ethers.provider.getCode(contract.address);
  console.log(code !== "0x" ? "✅ Contract verified on chain" : "❌ Deployment failed!");
}

main().catch((error) => {
  console.error("❌ Deployment error:", error);
  process.exit(1);
});
```

---

## 2️⃣ **Create Poll Script (with FHE encrypted zeros)**

> `scripts/create_poll_with_fhe.js`

```js
const { ethers } = require("hardhat");
const { createInstance } = require("@zama-fhe/relayer-sdk");
const fs = require("fs");
require("dotenv").config();

const SDK_CONFIG = {
  chainId: 11155111,
  networkUrl: `https://eth-sepolia.g.alchemy.com/v2/${process.env.ALCHEMY_KEY}`,
  relayerUrl: "https://relayer.testnet.zama.cloud",
  gatewayUrl: "https://gateway.sepolia.zama.ai/",
  aclContractAddress: "0x687820221192C5B662b25367F70076A37bc79b6c",
  kmsContractAddress: "0x1364cBBf2cDF5032C47d8226a6f6FBD2AFCDacAC",
};

async function main() {
  console.log("🧠 Creating poll with encrypted zero counts...");

  const { address: contractAddress } = JSON.parse(fs.readFileSync("deployment.json"));
  const [signer] = await ethers.getSigners();
  console.log("👤 Using wallet:", signer.address);

  const contract = await ethers.getContractAt("PollFactorySepolia", contractAddress);

  const sdk = await createInstance(SDK_CONFIG);

  const title = "Will Bitcoin reach $200,000 in 2025?";
  const options = ["YES", "NO"];
  const durationHours = 48;
  const duration = durationHours * 3600;

  const encryptedZeros = [];
  const attestations = [];

  for (let i = 0; i < options.length; i++) {
    console.log(`🔐 Encrypting initial 0 for option ${options[i]}...`);
    const encryptedInput = await sdk.createEncryptedInput(signer.address, contractAddress);
    const encZero = await encryptedInput.add32(0);
    const attestation = await encryptedInput.encrypt();
    encryptedZeros.push(encZero);
    attestations.push(attestation);
  }

  console.log("📡 Sending createPoll transaction...");
  const tx = await contract.createPoll(title, options, duration, encryptedZeros, attestations);
  console.log("⏳ Waiting for confirmation...");
  const receipt = await tx.wait();

  console.log("✅ Poll created!");
  console.log("   Tx hash:", receipt.transactionHash);
}

main().catch((err) => {
  console.error("❌ createPoll failed:", err);
  process.exit(1);
});
```

---

## 3️⃣ **Vote Script (encrypted vote)**

> `scripts/vote_encrypted.js`

```js
const { ethers } = require("hardhat");
const { createInstance } = require("@zama-fhe/relayer-sdk");
const fs = require("fs");
require("dotenv").config();

const SDK_CONFIG = {
  chainId: 11155111,
  networkUrl: `https://eth-sepolia.g.alchemy.com/v2/${process.env.ALCHEMY_KEY}`,
  relayerUrl: "https://relayer.testnet.zama.cloud",
  gatewayUrl: "https://gateway.sepolia.zama.ai/",
  aclContractAddress: "0x687820221192C5B662b25367F70076A37bc79b6c",
  kmsContractAddress: "0x1364cBBf2cDF5032C47d8226a6f6FBD2AFCDacAC",
};

async function main() {
  console.log("🗳️ Casting encrypted vote...");

  const { address: contractAddress } = JSON.parse(fs.readFileSync("deployment.json"));
  const [signer] = await ethers.getSigners();
  const contract = await ethers.getContractAt("PollFactorySepolia", contractAddress);

  const pollId = 1;
  const selectedOptionIndex = 0; // YES = 0

  const sdk = await createInstance(SDK_CONFIG);
  const encryptedInput = await sdk.createEncryptedInput(signer.address, contractAddress);
  const encryptedVote = await encryptedInput.add32(selectedOptionIndex);
  const attestation = await encryptedInput.encrypt();

  console.log("📡 Sending encrypted vote transaction...");
  const tx = await contract.vote(pollId, encryptedVote, attestation);
  console.log("⏳ Waiting for confirmation...");
  const receipt = await tx.wait();

  console.log("✅ Vote submitted!");
  console.log("   Tx hash:", receipt.transactionHash);
}

main().catch((err) => {
  console.error("❌ vote failed:", err);
  process.exit(1);
});
```

---

## 4️⃣ **Full E2E Test Flow**

> `scripts/full_test_flow.js`

```js
const { execSync } = require("child_process");

async function run(cmd) {
  console.log(`\n▶️ ${cmd}`);
  execSync(cmd, { stdio: "inherit" });
}

async function main() {
  console.log("🏗️ Full fhEVM Coprocessor Test Flow on Sepolia");

  run("npx hardhat run scripts/deploy_sepolia_coprocessor.js --network sepolia");
  run("npx hardhat run scripts/create_poll_with_fhe.js --network sepolia");
  run("npx hardhat run scripts/vote_encrypted.js --network sepolia");

  console.log("\n✅ All steps completed successfully!");
}

main().catch(console.error);
```

---

## 🧠 Summary

| Step                  | Purpose                                 | File                            | Command                                                                   |
| --------------------- | --------------------------------------- | ------------------------------- | ------------------------------------------------------------------------- |
| Deploy contract       | Deploy PollFactorySepolia to Sepolia    | `deploy_sepolia_coprocessor.js` | `npx hardhat run scripts/deploy_sepolia_coprocessor.js --network sepolia` |
| Create encrypted poll | Generate encrypted zeros + attestations | `create_poll_with_fhe.js`       | `npx hardhat run scripts/create_poll_with_fhe.js --network sepolia`       |
| Submit encrypted vote | Encrypt vote option + proof             | `vote_encrypted.js`             | `npx hardhat run scripts/vote_encrypted.js --network sepolia`             |
| Full pipeline         | Run all above sequentially              | `full_test_flow.js`             | `node scripts/full_test_flow.js`                                          |

---

## 🧩 Next Steps

If you’d like, I can extend this with:

* A **`decrypt_results.js`** script that uses `FHE.makePubliclyDecryptable` and displays the plaintext results.
* A **frontend React component** to visualize encrypted polls in real time (using SDK decryption hooks).

Would you like me to include those next?


